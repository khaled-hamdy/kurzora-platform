require("dotenv").config();
const fetch = require("node-fetch");

async function quickDebug() {
  console.log("üéØ Quick Debug - 30 second timeout");
  console.log("=" .repeat(50));

  try {
    console.log("üì° Sending request...");
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 seconds

    const response = await fetch(`${process.env.VITE_SUPABASE_URL}/functions/v1/automated-signal-generation-v4`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.SUPABASE_SERVICE_KEY}`,
        'apikey': process.env.SUPABASE_SERVICE_KEY
      },
      body: JSON.stringify({
        startIndex: 0,
        endIndex: 5,
        batchNumber: 999
      }),
      signal: controller.signal
    });

    clearTimeout(timeoutId);
    
    console.log(`üìä Status: ${response.status}`);
    console.log(`üìä Response received in < 30 seconds`);

    if (response.ok) {
      const data = await response.json();
      console.log(`üìä Response size: ${JSON.stringify(data).length} characters`);
      console.log(`üìä Has data: ${!!data.data}`);
      console.log(`üìä Signals: ${data.data?.signals?.length || 0}`);
      console.log(`üìä Session #402: ${!!data.session_402_divergence}`);
      
      if (data.session_402_divergence) {
        console.log(`‚úÖ MINIMAL DIVERGENCE INTEGRATION WORKING!`);
        console.log(`   Version: ${data.session_402_divergence.version}`);
        console.log(`   Mode: ${data.session_402_divergence.divergence_mode}`);
        console.log(`   Enabled: ${data.session_402_divergence.divergence_enabled}`);
      }
      
      if (data.data?.signals?.length > 0) {
        console.log(`‚úÖ SIGNALS FOUND! Total: ${data.data.signals.length}`);
        const firstSignal = data.data.signals[0];
        console.log(`üéØ First signal: ${firstSignal.ticker}`);
        console.log(`   Score: ${firstSignal.confidence_score}%`);
        console.log(`   Divergence Bonus: ${firstSignal.divergence_bonus || 'N/A'}`);
        console.log(`   Strong Divergence: ${firstSignal.has_strong_divergence || 'N/A'}`);
      } else {
        console.log(`‚ö†Ô∏è No signals generated - testing wider range...`);
      }

      if (data.divergence_stats) {
        console.log(`üìä Divergence Stats:`);
        console.log(`   Total Signals: ${data.divergence_stats.total_signals}`);
        console.log(`   With Divergence: ${data.divergence_stats.signals_with_divergence}`);
        console.log(`   Enhancement Rate: ${data.divergence_stats.divergence_enhancement_rate}%`);
      }
    } else {
      const errorText = await response.text();
      console.log(`‚ùå Error: ${errorText.substring(0, 500)}...`);
    }

  } catch (error) {
    if (error.name === 'AbortError') {
      console.log("‚è∞ Request timed out after 30 seconds");
      console.log("‚ùå The edge function is taking too long to respond");
    } else {
      console.log(`‚ùå Error: ${error.message}`);
    }
  }
}

quickDebug();